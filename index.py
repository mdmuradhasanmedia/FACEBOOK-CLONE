# Obfuscated with PyObfuscate
# https://www.github.com/htr-tech
# Time : Wed Apr 23 06:07:47 2025
# -------------------------------
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b'=='))
